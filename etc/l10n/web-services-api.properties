# api overview strings
overview.title=php::SRA_Controller::getAppShortName()::php Web Services Overview
overview.webServices=Web Services
overview.webServicesDesc=The web services available for this application are:
overview.wsdlLink=Download WSDL for all services
overview.wsGateway=Web Services Gateway
overview.wsGatewayDesc=The URI for this application's web service gateway is 

# api service details strings
service.attribute=Attribute Name
service.attributeDataType=Data Type
service.attributeDesc=Description
service.attributeReadOnly=Read Only
service.attributeSetOnly=Set Only
service.attribute.notIncluded=This attribute is not included in response output
service.attribute.remove=This attribute name can be used to remove values from the
service.attribute.remove1=attribute listed above during update actions.
service.dataType=Data Type/Default
service.entityDesc=This service may be used to 
service.entityDesc1=instances of the
service.entityDesc2=entity. This entity includes the following attributes:
service.input=Request Input
service.inputDesc=This service can be accessed by REST or SOAP using the web services gateway URI
service.inputDescRest=This service can be accessed by REST only using the web services gateway URI 
service.inputDescSoap=This service can be accessed by SOAP only using the web services gateway URI 
service.inputDesc1=The following table describes the parameters that can be used in conjunction with this service:
service.inputDesc1Rest=REST parameter can be specified using the GET/POST http headers OR using XML where the root element is "ws-request" and the XML value is assigned to the "ws-request-xml" GET or POST value. If both types parameters are specified, GET/POST will override the XML parameters
service.inputDesc1Soap=SOAP parameters are specified using the WsRequest complex type defined in the
service.input.create=Create Request
service.input.delete=Delete Request
service.input.examples=Click on the buttons below to view example requests:
service.input.inputCreate1=Create a new instance of this entity where attr1 equals val1 and attr2 equals val2
service.input.inputDelete1=Deletes the instance of this entity with primary key 123
service.input.inputGlobal1=Invokes this service using 1 parameter param1=val1
service.input.inputRetrieve1=Retrieve all instances of this entity
service.input.inputRetrieve2=Retrieves a single instance of this entity whose primary key is 123
service.input.inputRetrieve3=Retrieve all instances of this entity where [attr1] equals [val1]
service.input.inputUpdate1=Updates the instance of this entity with primary key 123, setting attr1 to va1 and attr2 to val2
service.input.retrieve=Retrieve Request
service.input.update=Update Request
service.notPublic=API is not available for this service
service.output=Response Output
service.output.action=The action that was performed
service.output.count=This value has different meanings depending on the request action:<ul><li>create: 1 if the insert was successful</li><li>delete: 0 if the delete was successful</li><li>retrieve: the total # of matching entity instances regardless of the limit and offset specified in the request</li><li>update: 1 if an update occurred (0 if it was unsuccessful or if the entity was not dirty and thus did not need to be updated)</li></ul>
service.output.countMethod=The total # of matching items regardless of the limit and offset specified in the request
service.output.countQuery=The total query count regardless of limit and offset
service.output.countRb=The total # of strings in the resource bundle
service.output.dataType=Data Type
service.output.error=If the service invocation results in an error being generated, this output value will contain the error message
service.output.format=The format used to encode the response data. This is one of the following values:<ul><li>php::SRA_WS_FORMAT_JSON::php: the response data is json encoded</li><li>php::SRA_WS_FORMAT_XML::php: the response is an xml formatted</li></ul>
service.output.formatGlobal=The format used to encode the response data. This is one of the following values:<ul><li>php::SRA_WS_FORMAT_JSON::php: the response data is json encoded</li><li>php::SRA_WS_FORMAT_XML::php: the response is an xml formatted</li><li>php::SRA_WS_FORMAT_RAW::php: the response data is not encoded</li></ul>
service.output.global=Always 1... signifies that this service does not pertain to an entity
service.output.json=JSON
service.output.limit=The actual limit used in the request - if applicable (may or may not be the same as the request limit)
service.output.nonglobal=Always 0... signifies that this service pertains to an entity
service.output.offset=The request offset - if applicable
service.output.queryResultsJson=For JSON formatted responses, the response will be an array of hashes set to the response hash key "queryResults" where each hash in the array represents a row and is indexed by column name.
service.output.queryResultsXml=For XML and SOAP formatted responses, the response will be a sub-element containing sub-elements of rows and columns where the row "key" is the row number and the col "key" is the column name
service.output.rbJson=For JSON formatted responses, the response will be a hash set to the response hash key "resourceBundle" and the keys in this hash are the resource bundle string identifiers.
service.output.rbXml=For XML and SOAP formatted responses, the response will be a sub-elements of strings where the row "key" is the resource bundle string identifier
service.output.requestId=The "request-id" specified in the request (if applicable)
service.output.requestId1=The "request-id1" specified in the request (if applicable)
service.output.response=The response data will vary depending on the request action and format. When format is "php::SRA_WS_FORMAT_JSON::php" and an instance of this entity is returned, that entity will be JSON encoded. When format is "php::SRA_WS_FORMAT_XML::php" and an instance of this entity is returned, that entity will be XML encoded. Examples of both are provided below. This service supports the following actions:
service.output.responseCreate=create: if successful, response data will contain a single instance of this entity where the instance represents the newly created entity
service.output.responseDelete=delete: no response data is returned. Instead the "status" is set to "php::SRA_WS_REQUEST_STATUS_SUCCESS::php" if the delete request is successful
service.output.responseRetrieve=retrieve: if successful, response data will contain 0 or more instances of this entity UNLESS ws-id has been specified in which case only 1 instance will be returned corresponding with that entity id
service.output.responseUpdate=update: if successful, response data will contain a single instance of this entity where the instance represents the updated entity
service.output.responseGlobal=Consult the service documentation at the top of this page for more information about the return value from invoking this service
service.output.service=The name of the service that was invoked
service.output.sessionId=The session id for this request (if use-sessions was true or an existing session-id was specified in the request)
service.output.soap=SOAP
service.output.status=Defines the status of this service request. Any value other than "php::SRA_WS_REQUEST_STATUS_SUCCESS::php" signifies that the request failed. The following is a list of all of the possible status codes for this service:
service.output.status.authFailed=The request failed because the user or password specified is not valid
service.output.status.failed=The request failed
service.output.status.invalidApp=The request could not be performed because the "ws-app" specified is not valid
service.output.status.invalidAttrs=The request could not be performed because attributes were set (ws-param values) that are not allowed to be set by the service, or if attributes set do not exist, or if attributes set are read only
service.output.status.invalidPk=Identifies that an update/delete request that failed because the primary key (ws-id) specified was not valid
service.output.status.invalidFormat=The request could not be performed because the "format" requested is not valid for this service
service.output.status.invalidInput=The request could not be performed because the input specified for an update or create action did not pass validation. If this occurs, the response data will contain the error messages resulting from the failed validation
service.output.status.invalidLimit=The request failed because the "limit" specified is to high for this service
service.output.status.invalidMetaFormat=The request failed because the "meta-format" requested is not valid for this service
service.output.status.invalidProtoRest=The request failed because it cannot be invoked using REST protocol
service.output.status.invalidProtoSoap=The request failed because it cannot be invoked using SOAP protocol
service.output.status.invalidRequest=The request failed because the request not properly formed
service.output.status.invalidService=The request failed because the service (ws) specified is not valid
service.output.status.ipNotAllowed=The request failed because the client IP address is not allowed to invoke it
service.output.status.notAllowed=The request failed because the specified action (retrieve, create, update, or delete) is not permitted by this service
service.output.status.notAvailable=Returned for "query" type requests when that request has not yet been completed
service.output.status.success=The request was completed successfully
service.output.status.timeout=Returned for "query" type requests when the initial asynchronous request timed out (asynchronous requests have up to php::SRA_WS_GATEWAY_ASYNC_REQUEST_TIMEOUT::php minutes to complete)
service.output.time=The amount of time (in seconds) to complete the request (w/ 2 decimal places)
service.output.validationErrors=Returned for update and create requests when the "status" is "php::SRA_WS_REQUEST_STATUS_INVALID_ATTRS::php".
service.output.validationErrorsJson=For JSON formatted responses, the response will be a hash set to the response hash key "validationErrors" where the keys in this hash correspond with the names of attributes or validators that failed validation and the value is the error message.
service.output.validationErrorsXml=For XML and SOAP formatted responses, the response will be sub-elements of error messages where the error "key" is the name of attribute or validator that failed validation and the value is the error message.
service.output.xml=XML
service.output.metadata=Metadata?
service.output.desc=Description
service.outputDesc=The response from each web service request is constituted of both metadata and response data. These values may be XML or JSON encoded depending on the format and meta-format defined in the request. If the meta-format specified in the request is "php::SRA_WS_META_FORMAT_NONE::php", none of the metadata response values will be included in the response. The following table describes all of the possible response data for this service:
service.overviewLink=Return to overview
service.param=GET/POST
service.paramDesc=Description
service.paramWsdl=SOAP
service.paramXml=XML
service.param.ws=The name of the web service to invoke
service.param.ws.rewrite=This parameter can also be specified directly in the URI using this format:
service.param.action=Defines whether the request is to create, update or delete an entity. Do not specify for retrieve requests
service.param.app=The name of the application
service.param.app.rewrite=This parameter can also be specified directly in the URI using this format:
service.param.asynchronous=Specifies whether or not the output of this request should be buffered to a session variable (client must accept cookies or sessions must be in use) instead of output to the client. Asynchronous responses can be retrieved through subsequent invocations specifying the same "request-id" parameters and query="1". The status codes "php::SRA_WS_REQUEST_STATUS_RESULTS_NOT_AVAILABLE::php" and "php::SRA_WS_REQUEST_STATUS_TIMEOUT::php" are utilized to indicate a status for subsequent requests attempting to obtain the buffer results. The response from asynchronous requests must be retrieved within php::SRA_WS_GATEWAY_BUFFER_FILE_REMOVE::php minute or they will be discarded
service.param.callback=an optional jsonp callback function name to wrap the results in (applies only to json responses)
service.param.connective=When multiple constraints are specified for an individual constraint group, this parameter defines how those constraints should be evaluated together. "php::SRA_WS_CONSTRAINT_GROUP_CONNECTIVE_CONJUNCTIVE::php" signifies that ALL constraints must evaluate to true, while "php::SRA_WS_CONSTRAINT_GROUP_CONNECTIVE_DISJUNCTIVE::php" signifies that ONLY 1 constraint must evaluate to true. The default connective (if another is not specified) is "php::SRA_WS_CONSTRAINT_GROUP_CONNECTIVE_CONJUNCTIVE::php"
service.param.constraintGroup=Constraint groups can be used in conjunction with retrieve requests in order to filter the results of that request. For example, to return only users whose last name is 'Smith'. Each constraint group defines a set of attributes and the values that should be matched against those attributes. If multiple constraint groups are specified in a service request, all must evaluate to true
service.param.constraintGroupRest=. When constraint groups are specified using GET/POST parameters the M value in the parameter name must be replaced with a numeric value unique to that constraint group (all constraint parameters pertaining to that group should utilize the same M value)
service.param.constraint.attr=The name of the attribute this constraint pertains to (one of the attribute names listed in the previous table). Sub-attributes can be specified for entity type attributes, each separated by an underscore.
service.param.constraint.attrRest=. When constraints are specified using GET/POST parameters the N value in the parameter name must be replaced with a numeric value unique to that constraint (all parameters pertaining to that constraint should utilize the same N value)
service.param.constraint.operator=A bitmask containing one or more of the following operator values. These define how the constraint attribute and values should be compared:<br /><br />EQUALITY CONSTRAINTS<br />1:    attr and value must be equal (default if not specified otherwise)<br />2:    attr is greater than value<br />4:    attr is less than value<br /><br />STRING CONSTRAINTS (only 1 constraint allowed if used)<br />8:    attr starts with value<br />16:   attr ends with value<br />32:   attr is a sub-string of value (full text search)<br /><br />SORTING CONSTRAINTS<br />64:   sort the results by attr in ascending order<br />128:  sort the results by attr in descending order<br /><br />NEGATE BIT<br />256:  negate the results of any of the above operator constraints
service.param.constraint.attrType=Defines where the constrained attribute exists:<ul><li>php::SRA_WS_VALUE_TYPE_ATTR::php: attr is the name of an attribute/sub attribute (default if not specified otherwise)</li><li>php::SRA_WS_VALUE_TYPE_CONSTANT::php: attr is the name of a constant (or other code)</li><li>php::SRA_WS_VALUE_TYPE_GET::php: attr is the name of a parameter in the get headers</li><li>php::SRA_WS_VALUE_TYPE_GET_ATTR::php: attr is a 'getAttribute' value for the entity. cannot be used in conjunction with limit/offset</li><li>php::SRA_WS_VALUE_TYPE_GLOBAL::php: attr is the name of a global variable</li><li>php::SRA_WS_VALUE_TYPE_POST::php: attr is the name of a parameter in the post headers</li><li>php::SRA_WS_VALUE_TYPE_SESSION::php: attr is the name of a session variable
service.param.constraint.value=The value to evaluate against the attribute in this constraint
service.param.constraint.valueType=If the value for this constraint is not provided explicitly using the "value" parameter (the default behavior), this parameter should define where the value exists. This must be one of the following values:<ul><li>php::SRA_WS_VALUE_TYPE_CONSTANT::php: value is the name of a constant (or other code)</li><li>php::SRA_WS_VALUE_TYPE_GET::php: value is the name of a parameter in the get headers</li><li>php::SRA_WS_VALUE_TYPE_GLOBAL::php:  value is the name of a global variable</li><li>php::SRA_WS_VALUE_TYPE_POST::php: value is the name of a parameter in the post headers</li><li>php::SRA_WS_VALUE_TYPE_SESSION::php: value is the name of a session variable</li></ol>
service.param.dateFormat=The formatting string to use in the response for date values. if not specified and the 'time-format' parameter below is specified, 'time-format' will be used for both date and time values. If neither are specified, the default application date format will be used
service.param.doc=This parameter may be used to display web services documentation instead of invoking the service. Documentation can be displayed in human-readable php::SRA_WS_GATEWAY_DOC_TYPE_API::php format or in php::SRA_WS_GATEWAY_DOC_TYPE_WSDL::php format
service.param.excludeAttrs=Space or comma separated list of entity attributes to exclude from the response (for retrieve requests only)
service.param.format=The encoding format to use for the response value. The default format is "php::SRA_WS_FORMAT_XML::php" for SOAP and "php::SRA_WS_FORMAT_JSON::php" for REST
service.param.includeAttrs=Space or comma separated list of attributes that should be included in the response. Only these attributes will be included. Use "php::SRA_WS_REQUEST_PK::php" to specify the primary key (for retrieve requests only)
service.param.jsDates=If true and the "format" is "php::SRA_WS_FORMAT_JSON::php", "php::SRA_DATA_TYPE_DATE::php" and "php::SRA_DATA_TYPE_TIME::php" data types will be encoded using the javascript Date constructor: "new Date()". Default value for this parameter is true
service.param.limit=The maximum number of items to include in the response (for retrieve requests only)
service.param.limit1=. The maximum limit value for this web service is
service.param.limitFixed=The limit for this service is fixed and cannot be changed. The fixed limit value is
service.param.metaFormat=The encoding format to use for the response metadata. If "php::SRA_WS_META_FORMAT_NONE::php", metadata will not be included in the response
service.param.offset=The offset to use for items in the response. Generally used in conjunction with "limit" (for retrieve requests only)
service.param.params=Parameters can be used in conjunction with create and update requests in order to specify attribute values to use in those requests. Only those attributes listed in the table above that are not read-only can be set.
service.param.params.getpost=[non-ws GET/POST var]
service.param.paramsGlobal=Parameters to include in the service invocation.
service.param.params1=The N value in the parameter name must be replaced with a numeric value unique to that param (value and value-type must have the same N value).
service.param.params2=These values can also be specified using standard GET/POST parameters where all of those parameters that are not prefixed with "ws-" will be considered param values
service.param.paramsValue=The value for this parameter. When XML/SOAP formatted, this parameter can also be embedded between the open and close param tags. Note: Date/time values can be specified using most of the <a href="http://www.gnu.org/software/automake/manual/tar/Date-input-formats.html">GNU Date input formats</a>
service.param.paramsValueType=If the value for this constraint is not provided explicitly using the "value" parameter (the default behavior), this parameter should define where the value exists. This must be one of the following values:<ul><li>php::SRA_WS_VALUE_TYPE_CONSTANT::php: value is the name of a constant (or other code)</li><li>php::SRA_WS_VALUE_TYPE_GET::php: value is the name of a parameter in the get headers</li><li>php::SRA_WS_VALUE_TYPE_GLOBAL::php:  value is the name of a global variable</li><li>php::SRA_WS_VALUE_TYPE_POST::php: value is the name of a parameter in the post headers</li><li>php::SRA_WS_VALUE_TYPE_SESSION::php: value is the name of a session variable</li><li>php::SRA_WS_VALUE_TYPE_FILE::php: value is the name of an uploaded file</li></ol>
service.param.paramsValueType.getpost=[non-ws GET/POST var]-type
service.param.password=The authentication password. Use this parameter if your web services client does not support HTTP 401 authentication
service.param.query=Used this parameter in conjunction with a previous "asynchronous" request in order to query for the response of that request. If true, the "request-id" parameters must also be specified and be the same as those values submitted for the original "asynchronous" request
service.param.requestId=Each service request can specify up to 2 unique request identifiers using this and the "request-id1" parameters. These values will be returned in the response metadata.
service.param.requestId1=An optional second request identifier
service.param.retrieve=In order to retrieve, update or delete a specific instance of this entity, you must specify the primary key identifier of that instance. The primary key for this entity is the
service.param.retrieve1=attribute. 
service.param.sessionId=The session id for this request. Use this parameter in conjunction with "use-sessions" to eliminate the need to authenticate for every request. To obtain a session id, the web services client must first successfully complete an authenticated request (user and password specified) where "use-sessions" is true for that request. When this is done, the response metadata will provide a "session-id" that can then be used for future service requests. When used, authentication credentials will be obtained directly from that session and are thus not required in the request.
service.param.timeFormat=The formatting string to use in the response for time values. If not specified, the default application time format will be used
service.param.user=Authentication is required in order to use this web service. The web service gateway supports both preemptive HTTP 401 authentication as well as parameter based authentication. If your web services client does not support HTTP 401 authentication, you may use this and the "password" parameter to provide authentication credentials
service.param.useSessions=In order to obtain a session id, a web service client must first complete a successful authenticated request where this parameter is set to true for that request. The "php::SRA_WS_GATEWAY_NOOP::php" service may be used to simply obtain a session id while not invoking an actual service
service.param.validators=An optional space or comma separated list of additional validation methods that should be invoked when an update or create request is invoked. This entity provides the following validators:
service.param.workflowId=If the desired entity instance exists within a workflow instance, this parameter may be used to specify the workflow identifier. If this attribute is specified, 'key' or 'ws-id' MUST be the identifier of that entity within the workflow
service.param.xml=Use this GET/POST parameter to define an XML formatted request (the values in the XML column of this table)
service.primaryKey=This attribute is the primary key identifier for this entity


# error strings
error.invalidApp=Invalid App
error.invalidService=Invalid Service


# other strings
text.api=API Documentation
text.create=create
text.delete=delete
text.download=Download
text.downloadWsdl=Download WSDL
text.getpost=GET/POST
text.mixed=mixed
text.na=NA
text.or=or
text.required=Required?
text.retrieve=retrieve
text.service=Service Name
text.soap=SOAP
text.soapNotEnabled=SOAP not enabled for this service
text.update=update
text.view=View
text.wsdl=WSDL
text.xml=XML
